alias which="type -path"

case "X$TERM" in
    "Xxterm") alias ls="/bin/ls -F --color=auto"
esac
alias ll="ls -l"
alias la="ls -a"
alias lf="ls -F"
alias lr="ls -R"
alias lth="ls -lt|head"
alias ltm="ls -lt|more"
alias ltl="ls -lt|less"    # Effectively the same thing
alias mv="mv -i"
alias cp="cp -i"

alias h="history"
alias hg="history | grep"
ht() { history | tail -20; }
msw() { catdoc $1 | tr '\r' '\n'; }

alias ag="alias | grep"
alias eg="env | grep"

p() { pwd; }
alias ..="cd .."
alias m="less"
alias pg="ps ax | grep"
j() { jobs; }

alias mk="make"
mcm() { make clean; make; }

ec() { emacsclient -n $*; }

ssh-mult() { echo ssh; (cd $HOME/.ssh/; ssh-add id_rsa id_rsa.drexel id_rsa.github id_rsa.vu;) ; }

if [ -f $HOME/.dotfiles/bash/rsync ]; then
   . $HOME/.dotfiles/bash/rsync
fi

if [ -f $HOME/.dotfiles/bash/pictools ]; then
   . $HOME/.dotfiles/bash/pictools
fi

apt-refresh() {
    sudo apt-get update && \
        sudo apt-get upgrade -y && \
        sudo apt-get dist-upgrade -y && \
        sudo apt-get autoremove -y;
}

minutes() {
    minute_=0;
    while true; do
        echo -n "$minute_  ";
        sleep 60;
        minute_=$((minute_ + 1));
    done;
}

###########################################################################
# ssh login

tux() { xrlogin $tux; }

mirror-slow() { wget --wait=30 --random-wait --no-host-directories --convert-links --mirror --no-parent $1; }
mirror() { wget --wait=10 --random-wait --no-host-directories --convert-links --mirror --no-parent $1; }
mirror-fast() { echo fast mirror; wget --no-host-directories --convert-links --mirror --no-parent $1; }

rmthisdir() { p_=`pwd`; b_=`basename $p_`; cd ..; /bin/rmdir $b_; unset p_ b_; }

google() { w3m http://www.google.com/; }
cnn() { w3m https://lite.cnn.io/en; }

###########################################################################
# gpg

gpg-update-keys() { gpg --recv-keys `gpg --list-keys|grep pub|awk '{print $2}'|awk -F/ '{print $2}'`; }
gpg-update-sigs() { gpg --recv-keys `gpg --list-sigs $1|grep sig|cut -c 12-20|sort -u`; }
signed-me-verbose() { gpg --list-sigs |egrep '(^pub|jeff@purple.com)'| perl -wne 'my $last_line = ""; while(my $line = <>) { if($line !~ /^pub/) { print $last_line; print $line; } $last_line = $line; }'; }
signed-me() { gpg --list-sigs |egrep '(^pub|jeff@purple.com)'| perl -wne 'my $last_line = ""; while(my $line = <>) { if($line !~ /^pub/ and $last_line =~ /^pub/) { print $last_line; } $last_line = $line; }'; }

view-urls-by-file() {
    first_window=true;
    for p in $(egrep -v '^#' $1); do 
        if( $first_window ); then
            $www_browser --new-window "$p"; 
            first_window=false;
        else
            $www_browser "$p"; 
        fi
    done;
    unset first_window
}
morning() {
    view-urls-by-file $HOME/data/morning-web
    (
    #birthdays;
    #pilot-agenda;
    cat $HOME/common/data/to-do.txt | egrep -v '^#';
    ) | more
}
afternoon() { 
    view-urls-by-file $HOME/data/afternoon-web
    (
    cat $HOME/common/data/to-do.txt | egrep -v '^#';
    ) | more
}

###########################################################################
# Pictures

gq-slideshow() {
    if [ $# -gt 0 ]; then
        images=$*
    elif [ -e laptop ]; then
        images=laptop/*.jpg
    else
        images=*.jpg
    fi
    geeqie $images --remote --slideshow-start --fullscreen-start --delay=1
}
gqselect() { wc -l $1; geeqie --remote file $(cat $1) 2>/dev/null; }
gq() { geeqie --remote file $* 2>/dev/null; }
gq-make-laptop() {
    if [ ! -d laptop ]; then mkdir laptop; fi
    for f in *jpg; do if [ ! -e laptop/$f ]; then echo $f; convert -geometry 1366x768 $f laptop/$f; fi; done
}

undup() { if [ $# != 2 ]; then echo Usage: undup dir1 dir2; return; fi
    dir1=$1; dir2=$2;
    for f in "$dir1"/*.jpg "$dir1"/*.JPG; do
        b=$(basename "$f")
        if ( cmp -s "$f" "$dir2/$b") ; then
            # Files are the same
            echo cmp "$f" "$dir2/$b"
            echo rm $f
        fi
    done; }

# Rename an image from facebook.  Just a shortcut for changing the
# long facebook string to a date and a note that it came from
# facebook.
#
# Usage: fbi 11224383_10153806222239905_443955585564182480_o.jpg 20151130
fbi() {
    mv "$1" "$2"-facebook.jpg
}
# And if I am currently downloading, so I know that the image is the
# most recently touched, I can just specify the date.
fba() { fbi $(ls -t | head -1) $1; }


###########################################################################

checksum() { find . -type f -exec sha1sum \{\} \; ; }

separator() { echo ======================================================================; }


## Bulk-converting ogg-vorbis to mp3:
# d=...
# for f in $(find . -name '*ogg'); do
#     b=$(basename $f .ogg);
#     ffmpeg -i $f ~/to-nantes/$d/$b.mp3;
# done

###########################################################################
# ssh

## To compute ssh host key fingerprints:
# ssh-keygen -l -f /etc/ssh/ssh_host_rsa_key
# ssh-keygen -l -f /etc/ssh/ssh_host_dsa_key
ssh-list-all-keys() {
    # Cf. https://blog.g3rt.nl/upgrade-your-ssh-keys.html for interpretation.
    # As of 9/2016, I should see no 1024 bit keys, and RSA 2048 bit keys are ok but limit.
    # RSA 3072/4096 is good.  ECDSA is not so good.
    # Ed25519 is currently preferred.
    for keyfile in ~/.ssh/id_*; do ssh-keygen -l -f "${keyfile}"; done | uniq;
}
# That same blog (g3rt.nl) recommends generating keys thus:
#   ssh-keygen -o -a 100 -t ed25519
# https://blog.g3rt.nl/upgrade-your-ssh-keys.
ssh-tabula-rasa() { unset SSH_AGENT_PID; unset SSH_AUTH_SOCK; exec ssh-agent bash; }
ssh-github() { ssh-add ~/.ssh/id_rsa.github; }
ssh-jelly() { ssh-add ~/.ssh/id_rsa.jellybooks; }

data-notes() {
    cd $HOME/common/work/employment/Goldman-Sachs/data-notes/;
    tr 'n-za-mN-ZA-M5-90-4' 'a-zA-Z0-9' < /tmp/gs.tgz | uudecode;
    tar xzf gs.tgz;
    rm gs.tgz;
};

# Things I should be doing.  A number indicates a priority, so the
# higher the number, the more restricted the list.  Realistically, the
# highest and second highest numbers available are generally all that
# is really useful, since the most important things I should do, and
# getting a glimpse of what's next can be useful.
#
# The priority is based on the number of trailing '=' on the entries.
# No number is equivalent to 1, so untagged items are not shown with
# this todo function.
todo() {
    # This assumes $1 is a number or doesn't exist.
    _tag==$(printf "=%.0s" $(seq 1 ${1:-1}))
    (cd $HOME/data/TODO/; grep $_tag *.txt | perl -pwe "s/$_tag$//;")
    unset _tag
}

# Show my ideal schedule for the day.  The argument is schedule
# version, which corresponds to a prefix tag on the relevant lines of
# the schedule file.
sched() {
    if [ -z "$1" ]; then
        (cd $HOME/data/; cat schedule | awk '{print $1}' | sort -u | sed /^$/d; )
    else
        _schedule=${1:-es}
        (cd $HOME/data/; grep -E "^$_schedule" schedule | sed -e "s/^$_schedule//;")
        unset _schedule
    fi
}

internet() {
    in_out=$(ifconfig wlan0 | grep bytes | perl -pwe 's/^.*:([0-9]+).*:([0-9]+).*$/$1 $2/;');
    RX_old=$(echo $in_out | awk '{print $1}');
    TX_old=$(echo $in_out | awk '{print $2}');
    sleep 10
    in_out=$(ifconfig wlan0 | grep bytes | perl -pwe 's/^.*:([0-9]+).*:([0-9]+).*$/$1 $2/;');
    RX_new=$(echo $in_out | awk '{print $1}');
    TX_new=$(echo $in_out | awk '{print $2}');
    echo RX: $((6 * (RX_new - $RX_old) )) bytes/minute;
    echo TX: $((6 * (TX_new - $TX_old) )) bytes/minute;
}
# Restart wifi, gently, then with gusto.
# This might better belong in the power manager after-sleep/suspend functions.
wifi() { nmcli radio wifi on; }
WIFI() { sudo /bin/systemctl restart network-manager.service; }
# Learn about available connections.
ls_wifi() { nmcli device wifi list; }

cppdoc() { ff $HOME/work/c++-docs/cpp.html & }

#workm-periodic() { while true; do date; workm force-put; sleep 900; separator; done; }
#workm-push() { workm force-put; }
srd-here() { srd "$*" -g "$(hostname)"; }
tsd-last() { tsd $1 $(tsd $1 | tail -1 | awk '{print $2}'); }
tea() { tsd tea $(date +%H%M); tsd tea; }
tsd-stats() { cat tsd/$1 | awk '{sum += $2; sumsq += $2^2;} END {printf("µ = %.1f   σ = %.1f   n = %d\n", sum/NR, sqrt(sumsq/NR-(sum/NR)^2), NR);}'; }
tsd-value() {
    tsd $1 | tail -1 | awk '{ printf("%d", $2) }';
}
tsd-chocolat() {
    echo $(( $(tsd-value araguani) + $(tsd-value guanaja) + $(tsd-value guanaja-lacte) +
	     $(tsd-value abinao) + $(tsd-value barry-cuba) + $(tsd-value barry-equiteur) +
	     $(tsd-value barry-tanzanie) + $(tsd-value barry-venezuela) +
	     $(tsd-value barry-madagascar) + $(tsd-value barry-ocoa) + $(tsd-value fleur-de-cao) +
	     $(tsd-value alain-ducasse) + $(tsd-value bonnat) + $(tsd-value chocolate-other) +
	     $(tsd-value coeur-de-guanaja) + $(tsd-value nyangbo) + $(tsd-value pate-de-cacao) ));
}

# rpass() { head -c $((500 + $RANDOM)) < /dev/urandom | sha1sum; }
rpass() { head -c $((40 + $RANDOM / 2000)) < /dev/urandom | base64; }
voyages() { libreoffice $HOME/work/finance/France/impots/$(date '+%Y')/voyages.ods & }
cheque() { libreoffice $HOME/data/chequier.ods & }
secu() { libreoffice $HOME/data/secu.ods & }
food() { libreoffice $HOME/work/finance/jeff-stephane/food-spending.ods & }
trader() { libreoffice $HOME/work/finance/UK-taxes/2016-2017/sole-trader/sole-trader-2016-2017.ods & }
term() { terminator -b -m & }
recipes() { case "X$HOSTNAME" in
    Xsiegfried|Xbirdsong) file=$HOME/src/jma/recipes/pdf/recipes-nexus9.pdf;;
    Xnantes|Xstarshine) file=$HOME/src/jma/recipes/pdf/recipes-laptop.pdf;;
    esac
    evince $file &
}

pm() { ogg=$(/bin/ls *ogg */*ogg 2>/dev/null); mp3=$(/bin/ls *mp3 */*mp3 2>/dev/null); if [ "x$ogg" != x ]; then ogg123 $ogg; fi; if [ "x$mp3" != x ]; then mpg123 $mp3; fi; unset mp3; unset ogg; }
script() { SCRIPT_NAME="$1" /usr/bin/script "$@"; }
fr() {
    if [ $# -gt 0 ]; then
        echo "$*" >> $HOME/work/notes/french-learning.txt;
    else
        more $HOME/work/notes/french-learning.txt;
    fi
}
note() { ec $HOME/data/notes/$1; }
notegr() { grep $1 $HOME/data/notes/$1; }

###########################################################################
# git

git-log-graph() { git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit; }
git-log-terse() { git log --pretty=format:"%ad%x09%an%x09%s" --date=short; }
git-log-table() { git log --pretty=format:'%C(yellow)%h|%Cred%ad|%Cblue%an|%Cgreen%d %Creset%s' --date=short | column -ts'|' | less -r; }
# git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
# git lg
# git lg -p

###########################################################################
# gtd

## Training functions.
# Say what I am doing now.
gtdw() { if [ "X$1" = X ]; then
    echo "What?"; else
    echo $(date +%s) "$1" >> $HOME/data/gtd/gtd_$(hostname); fi; }
# Output the set of things I've ever said I'm doing.  Ontology.
gtdq() { cat $HOME/data/gtd/gtd_* | awk '{print $2}' | sort -u; }
# Output the last thing I said I'm doing.
gtdnow() { tail -1 $HOME/data/gtd/gtd_$(hostname); }

## History
gtdlast() {
    _this_session=$(cd ~/data/gtd; ls -t $(hostname)__* | \
                        head -1 | \
                        sed -e "s/^$(hostname)__//");
    echo This session began at $_this_session.
    _prev_session=$(cd ~/data/gtd; ls -t $(hostname)__* | \
                        head -2 | tail -1)
    echo "  Last event from previous session:"
    _prev_last_event=$(tail -1 $HOME/data/gtd/$_prev_session)
    echo $_prev_last_event
    _prev_last_time=$(echo $_prev_last_event | awk '{print $1}')
    echo "  $(date -d @$_prev_last_time -R)"
    unset _this_session
    unset _prev_session
    unset _prev_last_event
    unset _prev_last_time
}

###########################################################################
# Utilities

## Time-date conversion, because I forget the flags
# Print current date as seconds since the epoch
d2t() { date +%s; }
# Translate epoch to human time
t2d() { date -d @$1 -R; }

fs-mount() {
    if [ $(ls $HOME/fs | wc -l) -gt 1 ]; then
        echo fs is already mounted.
    else
        (cd; sshfs jeff@fileserver:/d2/jeff fs)
    fi
}
fs-umount() { (cd; fusermount -u fs) }

# Serve the current directory on port 8000.
http() { python -m SimpleHTTPServer; }
serve-this() {
    dir=$(mktemp -d /tmp/serve-this-XXXXX)
    cp -r $* $dir/
    ( (sleep 600; /bin/rm -rf $dir/)& )&
    (cd $dir; http)
}

gf() { (cd "$HOME/data/hosts"; grep --no-filename "$1" */files.txt | \
            sort --ignore-case) }
gfd() { (cd "$HOME/data/hosts"; grep --no-filename "$1" */files.txt | \
             xargs dirname | \
             sort -u --ignore-case)  }

u2ps() {
    tmpfile=$(mktemp)
    cat > $tmpfile
    cedilla $tmpfile | lpr
    rm $tmpfile
}

###########################################################################
# python

# Shortcut for activating my virtual environments.
alias activate=". venv/bin/activate"

###########################################################################
# docker
nse() {
    pid=$(sudo docker inspect --format {{.State.Pid}} $1);
    echo $pid;
    sudo nsenter --target $pid --mount --uts --ipc --net --pid;
}

###########################################################################
# X / ratpoison / i3

sndq() { amixer scontrols; }
snddn() { amixer -D pulse set Master 5%-; }
sndup() { amixer -D pulse set Master 5%+; }
sndmute() { amixer -D pulse set Master toggle; }

undisp() { if [ $DISPLAY ]; then DISPLAY_WAS="$DISPLAY"; unset DISPLAY; fi; }
redisp() {
    if [ "X$DISPLAY" = X ]; then
        DISPLAY=$DISPLAY_WAS xwininfo -root >/dev/null 2>/dev/null
        if [ 0 = $? ]; then
            export DISPLAY="$DISPLAY_WAS";
        else
            echo Previous DISPLAY $DISPLAY_WAS is no longer valid.
        fi
    else
        echo DISPLAY is already set.
    fi;
}

###########################################################################
# Silence glibc asserts.

alias evince="evince 2>/dev/null"

###########################################################################
# UNA compta

# Probably these should go through python (pandas) just so that I can
# canonicalise the date format between EBP versions.  I would do that
# in the preprocess.sh scripts in
# $HOME/work/UNA/comite-directeur/trésorier/ebp-compta-exports/

# Trouver compte par numéro.
unacc() {
    una_base="$HOME/work/UNA/comite-directeur/trésorier/"
    grep -i "$1" "$una_base/ebp-compta-exports/EBP.EDI-accounts" | \
        sort;
}

unace() {
    una_base="$HOME/work/UNA/comite-directeur/trésorier/"
    grep -i "$1" "$una_base/ebp-compta-exports/export.txt-entries" | \
        sort;
}

## The same functions but looking at historical data as well as current.

ounacc ()
{
    (
        una_base="$HOME/work/UNA/comite-directeur/trésorier/"
        cd $una_base/ebp-compta-exports/;
        grep --no-filename -i "$1" \
             previous_year_exports/EBP*.EDI-accounts \
             EBP.EDI-accounts | \
            sort -u
    )
}

ounace ()
{
    (
        cd $HOME/work/UNA/comite-directeur/trésorier/ebp-compta-exports/;
        grep --no-filename -i "$1" \
             previous_year_exports/20*.txt-entries \
             export.txt-entries | \
            sort;
    )
}

# Some reporting examples.

# ebp_exemple_moteur()
# {
#     grep --color=auto --no-filename -iE "^E;" $HOME/work/UNA/comite-directeur/trésorier/ebp-compta-exports/previous_year_exports/EBP*.EDI | \
#       awk -F';' 'index($2, "401") != 0 && (index($7, "moteur") != 0 || index($7, "Yamaha") != 0) && $8 == "C" \
#             {printf("%-10s | %04d-%02d-%02d | %-40s | %10.2f € |\n",
#               $2, substr($3, 5, 4), substr($3, 3, 2), substr($3, 1, 2), $7, $9);
#              years[substr($3, 5, 4)] += $9;
#             }
#             END {
#               for (y in years) printf("  %s: %10.2f €\n", y, years[y]);
#             }'
# }

# Example report showing detail and year-by-year sums of all
# transactions on accounts beginning 401 involving either "moteur" or
# "Yamaha".
una-exemple-moteur()
{
    cat $HOME/work/UNA/comite-directeur/trésorier/ebp-compta-exports/previous_year_exports/20*.txt | \
        sort -u | \
        tr -d '"' | \
        awk -F';' 'index($2, "401") != 0 && (index($10, "moteur") != 0 || index($10, "Yamaha") != 0) && $12 > 0 \
            {printf("%-10s | %04d-%02d-%02d | %-40s | %10.2f € |\n",
              $2, substr($3, 7, 4), substr($3, 4, 2), substr($3, 1, 2), $10, $12);
             years[substr($3, 7, 4)] += $12;
            }
            END {
              for (y in years) printf("  %s: %10.2f €\n", y, years[y]);
            }'
}

# ebp-sum-account()
# {
#     grep --color=auto --no-filename -iE "^E;" $HOME/work/UNA/comite-directeur/trésorier/ebp-compta-exports/EBP.EDI | \
#       awk -F';' -v account=$1 '$2 == account { sums[$8] += $9; } \
#                                  END { printf("%-12s | débit=%10.2f | crédit=%10.2f\n", \
#                                        account, sums["D"], sums["C"]); }';
# }

una-sum-account()
{
    cat $HOME/work/UNA/comite-directeur/trésorier/ebp-compta-exports/export.txt | \
        sort -u | \
        tr -d '"' | \
        awk -F';' -v account=$1 '$5 == account { sums[$15] += $13; } \
                                 END { printf("%-12s | débit=%10.2f | crédit=%10.2f | solde=%10.2f\n", \
                                       account, sums["D"], sums["C"], sums["D"] + sums["C"]); }';
}

una-balances()
{
    # $5 == account.
    # $13 == amount.
    # $15 == C or D.
    cat $HOME/work/UNA/comite-directeur/trésorier/ebp-compta-exports/export.txt | \
        sort -u | \
        tr -d '"' | \
        awk -F';' '
        {
            sums[$5][$15] += $13;
        }
        END { for (account in sums) {
            printf("%-12s | débit=%10.2f | crédit=%10.2f | solde=%10.2f\n",
                   account, sums[account]["D"], sums[account]["C"],
                   sums[account]["D"] + sums[account]["C"]);
            }
        }' | sort -n;
}

# To help with helloasso.
ha-stats4() {
    csv_file="$1"
    # Field $4 is the amount for billetrie.
    # For gifts it is $6.
    # So fix that here.
    tail +2 "$csv_file" | awk -F';' '{sum += $4}
                                     END {printf("%.2f € collected, %d contributers\n",
                                                 sum, NR); }'
}

ha-stats6() {
    csv_file="$1"
    # Duplicate...
    tail +2 "$csv_file" | awk -F';' '{sum += $6}
                                     END {printf("%.2f € collected, %d contributers\n",
                                                 sum, NR); }'
}

ha-stats-textile() {
    csv_file="$1"
    tail +2 "$csv_file" | \
        awk -F';' '{printf("%3d | %15s | %5.2f € | %24s | %10s | %15s \n",
                           $1, $3, $4, $8 " " $7, substr($10, 1, length($10) - 3), $15); }'
}
