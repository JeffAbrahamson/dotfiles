alias which="type -path"

case "X$TERM" in
    "Xxterm") alias ls="/bin/ls -F --color=auto"
esac
alias ll="ls -l"
alias la="ls -a"
alias lf="ls -F"
alias lr="ls -R"
alias lth="ls -lt|head"
alias ltm="ls -lt|more"
alias ltl="ls -lt|less"    # Effectively the same thing
alias mv="mv -i"
alias cp="cp -i"

alias h="history"
alias hg="history | grep"
ht() { history | tail -20; }
msw() { catdoc $1 | tr '\r' '\n'; }

alias ag="alias | grep"
alias eg="env | grep"

p() { pwd; }
alias ..="cd .."
alias m="less"
alias pg="ps ax | grep"
j() { jobs; }

alias mk="make"
mcm() { make clean; make; }

ec() { emacsclient -n $*; }

if [ -f $HOME/.dotfiles/bash/rsync ]; then
   . $HOME/.dotfiles/bash/rsync
fi

if [ -f $HOME/.dotfiles/bash/pictools ]; then
   . $HOME/.dotfiles/bash/pictools
fi

apt-refresh() {
    sudo apt-get update && \
        sudo apt-get upgrade -y && \
	sudo apt-get autoremove -y && \
        sudo apt-get dist-upgrade -y && \
        sudo apt-get autoremove -y;
}

minutes() {
    minute_=0;
    while true; do
        echo -n "$minute_  ";
        sleep 60;
        minute_=$((minute_ + 1));
    done;
}

###########################################################################
# ssh login

tux() { xrlogin $tux; }

mirror-slow() { wget --wait=30 --random-wait --no-host-directories --convert-links --mirror --no-parent $1; }
mirror() { wget --wait=10 --random-wait --no-host-directories --convert-links --mirror --no-parent $1; }
mirror-fast() { echo fast mirror; wget --no-host-directories --convert-links --mirror --no-parent $1; }

rmthisdir() { p_=`pwd`; b_=`basename $p_`; cd ..; /bin/rmdir $b_; unset p_ b_; }

google() { w3m http://www.google.com/; }
cnn() { w3m https://lite.cnn.io/en; }

###########################################################################
# gpg

gpg-update-keys() { gpg --recv-keys `gpg --list-keys|grep pub|awk '{print $2}'|awk -F/ '{print $2}'`; }
gpg-update-sigs() { gpg --recv-keys `gpg --list-sigs $1|grep sig|cut -c 12-20|sort -u`; }
signed-me-verbose() { gpg --list-sigs |egrep '(^pub|jeff@purple.com)'| perl -wne 'my $last_line = ""; while(my $line = <>) { if($line !~ /^pub/) { print $last_line; print $line; } $last_line = $line; }'; }
signed-me() { gpg --list-sigs |egrep '(^pub|jeff@purple.com)'| perl -wne 'my $last_line = ""; while(my $line = <>) { if($line !~ /^pub/ and $last_line =~ /^pub/) { print $last_line; } $last_line = $line; }'; }

###########################################################################
# Pictures

gq-slideshow() {
    if [ $# -gt 0 ]; then
        images=$*
    elif [ -e laptop ]; then
        images=laptop/*.jpg
    else
        images=*.jpg
    fi
    geeqie $images --remote --slideshow-start --fullscreen-start --delay=1
}
gqselect() { wc -l $1; geeqie --remote file $(cat $1) 2>/dev/null; }
gq() { geeqie --remote file $* 2>/dev/null; }
gq-make-laptop() {
    if [ ! -d laptop ]; then mkdir laptop; fi
    for f in *jpg; do if [ ! -e laptop/$f ]; then echo $f; convert -geometry 1366x768 $f laptop/$f; fi; done
}

undup() { if [ $# != 2 ]; then echo Usage: undup dir1 dir2; return; fi
    dir1=$1; dir2=$2;
    for f in "$dir1"/*.jpg "$dir1"/*.JPG; do
        b=$(basename "$f")
        if ( cmp -s "$f" "$dir2/$b") ; then
            # Files are the same
            echo cmp "$f" "$dir2/$b"
            echo rm $f
        fi
    done; }

# Rename an image from facebook.  Just a shortcut for changing the
# long facebook string to a date and a note that it came from
# facebook.
#
# Usage: fbi 11224383_10153806222239905_443955585564182480_o.jpg 20151130
fbi() {
    mv "$1" "$2"-facebook.jpg
}
# And if I am currently downloading, so I know that the image is the
# most recently touched, I can just specify the date.
fba() { fbi $(ls -t | head -1) $1; }

imgcp() {
    echo "<img src='data:image/png;base64,"$(base64 -w0 "$1")"' />" | \
	xclip -selection clipboard -t text/html;
}

###########################################################################

checksum() { find . -type f -exec sha1sum \{\} \; ; }

separator() { echo ======================================================================; }


## Bulk-converting ogg-vorbis to mp3:
# d=...
# for f in $(find . -name '*ogg'); do
#     b=$(basename $f .ogg);
#     ffmpeg -i $f ~/to-nantes/$d/$b.mp3;
# done

srd-here() { srd "$*" -g "$(hostname)"; }
srd-here-e() { srd -E "$*" -g "$(hostname)"; }

###########################################################################
# ssh

## To compute ssh host key fingerprints:
# ssh-keygen -l -f /etc/ssh/ssh_host_rsa_key
# ssh-keygen -l -f /etc/ssh/ssh_host_dsa_key
ssh-list-all-keys() {
    # Cf. https://blog.g3rt.nl/upgrade-your-ssh-keys.html for interpretation.
    # As of 9/2016, I should see no 1024 bit keys, and RSA 2048 bit keys are ok but limit.
    # RSA 3072/4096 is good.  ECDSA is not so good.
    # Ed25519 is currently preferred.
    for keyfile in ~/.ssh/id_*; do ssh-keygen -l -f "${keyfile}"; done | uniq;
}
# That same blog (g3rt.nl) recommends generating keys thus:
#   ssh-keygen -o -a 100 -t ed25519
# https://blog.g3rt.nl/upgrade-your-ssh-keys.
ssh-tabula-rasa() { unset SSH_AGENT_PID; unset SSH_AUTH_SOCK; exec ssh-agent bash; }
ssh-github() { ssh-add ~/.ssh/id_rsa.github; }
ssh-p27() { ssh-add ~/.ssh/id_ed25519.p27; }
ssh-jelly() { ssh-add ~/.ssh/id_rsa.jellybooks; }

ssh-setup() {
    srd-here-e ssh
    srd-here gith
    srd-here-e p27-ssh
    srd-here ssh
    ssh-add
    ssh-github
    ssh-p27
    ssh-jelly
    ssh-add -l
}

ssl-status() {
    name="$1"
    echo | openssl s_client -servername "$name" -connect "$name":443 2>/dev/null | openssl x509 -noout -dates
}

siegfried-xload() { ssh siegfried -f -X xload; }

# This used to be my way of transferring personal notes home from work.
# I keep the alias just to remind me of these old notes.
data-notes() {
    cd $HOME/work/employment/old/Goldman-Sachs/data-notes/;
    # tr 'n-za-mN-ZA-M5-90-4' 'a-zA-Z0-9' < /tmp/gs.tgz | uudecode;
    # tar xzf gs.tgz;
    # rm gs.tgz;
};

# Things I should be doing.  A number indicates a priority, so the
# higher the number, the more restricted the list.  Realistically, the
# highest and second highest numbers available are generally all that
# is really useful, since the most important things I should do, and
# getting a glimpse of what's next can be useful.
#
# The priority is based on the number of trailing '=' on the entries.
# No number is equivalent to 1, so untagged items are not shown with
# this todo function.
todo() {
    # This assumes $1 is a number or doesn't exist.
    _tag==$(printf "=%.0s" $(seq 1 ${1:-1}))
    (cd $HOME/data/TODO/; grep $_tag *.txt | perl -pwe "s/$_tag$//;")
    unset _tag
}

# Show my ideal schedule for the day.  The argument is schedule
# version, which corresponds to a prefix tag on the relevant lines of
# the schedule file.
sched() {
    if [ -z "$1" ]; then
        (cd $HOME/data/; cat schedule | awk '{print $1}' | sort -u | sed /^$/d; )
    else
        _schedule=${1:-es}
        (cd $HOME/data/; grep -E "^$_schedule" schedule | sed -e "s/^$_schedule//;")
        unset _schedule
    fi
}

internet() {
    in_out=$(ifconfig wlan0 | grep bytes | perl -pwe 's/^.*:([0-9]+).*:([0-9]+).*$/$1 $2/;');
    RX_old=$(echo $in_out | awk '{print $1}');
    TX_old=$(echo $in_out | awk '{print $2}');
    sleep 10
    in_out=$(ifconfig wlan0 | grep bytes | perl -pwe 's/^.*:([0-9]+).*:([0-9]+).*$/$1 $2/;');
    RX_new=$(echo $in_out | awk '{print $1}');
    TX_new=$(echo $in_out | awk '{print $2}');
    echo RX: $((6 * (RX_new - $RX_old) )) bytes/minute;
    echo TX: $((6 * (TX_new - $TX_old) )) bytes/minute;
}
# Restart wifi, gently, then with gusto.
# This might better belong in the power manager after-sleep/suspend functions.
wifi() { nmcli radio wifi on; }
WIFI() { sudo /bin/systemctl restart network-manager.service; }
# Learn about available connections.
ls_wifi() { nmcli device wifi list; }

bandwidth() {
    # Argument, if present, is number of lines of tail at the end.
    if [ "X$1" = X ]; then
	tail_cmd=cat
    else
	tail_cmd="tail -$1"
    fi
    bandwidth_format() {
	awk '{printf("%10d  %-20s    %6.1f    %6.1f    %5.1f\n", $1, $2, $3, $4, $5);}'
    }
    tmp0=$(mktemp)
    tmp1=$(mktemp)
    tmp2=$(mktemp)
    echo "time        ssid                  download    upload     ping"
    (cd /home/jeff/data/hosts/$(hostname -s);
     cat speedtest-ssid | sed -e 's/ /\t/; s/ /_/g;' > $tmp0
     join $tmp0 speedtest-download > $tmp1; join $tmp1 speedtest-upload > $tmp2; join $tmp2 speedtest-ping | bandwidth_format | $tail_cmd;
    )
    rm $tmp1 $tmp2
    unset bandwidth_format tail_cmd
}
bandwidth-stats() {
    ssid="$1"			# Fragment of SSID.
    depth="$2"
    if [ "$depth" ]; then
	restrict="tail -$depth"
    else
	restrict=cat
    fi
    ssid_name=$( bandwidth | grep "$ssid" | awk '{print $2}' | sort -u)
    for one_ssid in $ssid_name; do
	download=$( bandwidth | grep " $one_ssid " | eval $restrict | awk '{sum += $3; sumsq += $3^2} END { printf("μ=%5.1f  σ=%5.1f", sum / NR, sqrt((sumsq - sum^2 / NR)/NR));}')
	upload=$( bandwidth | grep " $one_ssid " | eval $restrict | awk '{sum += $4; sumsq += $4^2} END { printf("μ=%5.1f  σ=%5.1f", sum / NR, sqrt((sumsq - sum^2 / NR)/NR));}')
	ping=$( bandwidth | grep " $one_ssid " | eval $restrict | awk '{sum += $5; sumsq += $5^2} END { printf("μ=%7.1f  σ=%7.1f", sum / NR, sqrt((sumsq - sum^2 / NR)/NR));}')
	NR=$( bandwidth | grep " $one_ssid " | eval $restrict | wc -l )
	printf "%-22s  #=%-4d |  %s  |  %s  |  %s\n"  "$one_ssid" "$NR" "down: $download" "up: $upload" "ping: $ping"
    done
}

cppdoc() { ff $HOME/work/c++-docs/cpp.html & }

#workm-periodic() { while true; do date; workm force-put; sleep 900; separator; done; }
#workm-push() { workm force-put; }
tea() { tsd tea $(date +%H%M); tsd tea; }

tsd-group() {
    filter="$1"
    option="$2"
    value=0
    for f in $(tsd -L | grep -E "^$filter"); do
	the_date=$(tsd $f | tail -1 | awk '{print $1}')
	the_mass=$(tsd $f | tail -1 | awk '{print $2}')
	value=$(( $value + $(tsd-value $f) ))
	if [ "X$option" = X ]; then
	    printf "%-25s   %-4.0f g   %s\n" "$f" "$the_mass" "$the_date"
	fi
    done
    printf "  Σ=%d\n" $value
}
tsd-chocolat() { tsd-group chocolat $*; }
tsd-farine() { tsd-group farine $*; }
tsd-riz() { tsd-group "riz-" $*; }

tsd-balance() {
    for f in $(tsd -L | grep "balance-"); do
	last_reading=$(tsd $f | tail -1 | awk '{print $2}')
	read -p "$f  (was: $last_reading)  " value
	tsd $f $value
    done
    tsd-today | grep "balance-"
}

# rpass() { head -c $((500 + $RANDOM)) < /dev/urandom | sha1sum; }
rpass() { head -c $((40 + $RANDOM / 2000)) < /dev/urandom | base64; }
# voyages() { libreoffice $HOME/work/finance/France/impots/$(date '+%Y')/voyages.ods & }
cheque() { libreoffice $HOME/data/chequier.ods & }
secu() { libreoffice $HOME/data/secu.ods & }
# food() { libreoffice $HOME/work/finance/jeff-stephane/food-spending.ods & }
# trader() { libreoffice $HOME/work/finance/UK-taxes/2016-2017/sole-trader/sole-trader-2016-2017.ods & }
# term() { terminator -b -m & }
recipes() { case "X$HOSTNAME" in
    Xsiegfried|Xbirdsong) file=$HOME/src/jma/recipes/pdf/recipes-nexus9.pdf;;
    Xnantes|Xstarshine) file=$HOME/src/jma/recipes/pdf/recipes-laptop.pdf;;
    esac
    evince $file &
}

pm() { ogg=$(/bin/ls *ogg */*ogg 2>/dev/null); mp3=$(/bin/ls *mp3 */*mp3 2>/dev/null); if [ "x$ogg" != x ]; then ogg123 $ogg; fi; if [ "x$mp3" != x ]; then mpg123 $mp3; fi; unset mp3; unset ogg; }
script() { SCRIPT_NAME="$1" /usr/bin/script "$@"; }
fr() {
    if [ $# -gt 0 ]; then
        echo "$*" >> $HOME/work/notes/french-learning.txt;
    else
        more $HOME/work/notes/french-learning.txt;
    fi
}
note() { ec $HOME/data/notes/$1; }
notegr() { grep $1 $HOME/data/notes/$1; }

###########################################################################
# git

git-log-graph() { git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit $*; }
git-log-terse() { git log --pretty=format:"%ad%x09%an%x09%s" --date=short $*; }
git-log-table() { git log --pretty=format:'%C(yellow)%h|%Cred%ad|%Cblue%an|%Cgreen%d %Creset%s' --date=short $*; }
# git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
# git lg
# git lg -p

# From https://stackoverflow.com/a/3452888/833300
pip-update-all() {
    pip list --outdated --format=freeze | \
	grep -v '^\-e' | \
	cut -d = -f 1  | \
	xargs -n1 pip install -U;
}


###########################################################################
# gtd

## Training functions.
# Say what I am doing now.
gtdw() { if [ "X$1" = X ]; then
    echo "What?"; else
    echo $(date +%s) "$1" >> $HOME/data/gtd/gtd_$(hostname); fi; }
# Output the set of things I've ever said I'm doing.  Ontology.
gtdq() { cat $HOME/data/gtd/gtd_* | awk '{print $2}' | sort -u; }
# Output the last thing I said I'm doing.
gtdnow() { tail -1 $HOME/data/gtd/gtd_$(hostname); }

## History
gtdlast() {
    _this_session=$(cd ~/data/gtd; ls -t $(hostname)__* | \
                        head -1 | \
                        sed -e "s/^$(hostname)__//");
    echo This session began at $_this_session.
    _prev_session=$(cd ~/data/gtd; ls -t $(hostname)__* | \
                        head -2 | tail -1)
    echo "  Last event from previous session:"
    _prev_last_event=$(tail -1 $HOME/data/gtd/$_prev_session)
    echo $_prev_last_event
    _prev_last_time=$(echo $_prev_last_event | awk '{print $1}')
    echo "  $(date -d @$_prev_last_time -R)"
    unset _this_session
    unset _prev_session
    unset _prev_last_event
    unset _prev_last_time
}

###########################################################################
# Utilities

## Time-date conversion, because I forget the flags
# Print current date as seconds since the epoch
d2t() { date +%s; }
# Translate epoch to human time
t2d() { date -d @$1 -R; }

fs-mount() {
    if [ $(ls $HOME/fs | wc -l) -gt 1 ]; then
        echo fs is already mounted.
    else
        (cd; sshfs jeff@fileserver:/d2/jeff fs)
    fi
}
fs-umount() { (cd; fusermount -u fs) }

# Serve the current directory on port 8000.
http() { python -m SimpleHTTPServer; }
serve-this() {
    dir=$(mktemp -d /tmp/serve-this-XXXXX)
    cp -r $* $dir/
    ( (sleep 600; /bin/rm -rf $dir/)& )&
    (cd $dir; http)
}

gf() { (cd "$HOME/data/hosts"; grep --no-filename "$1" */files.txt | \
            sort --ignore-case) }
gfd() { (cd "$HOME/data/hosts"; grep --no-filename "$1" */files.txt | \
             xargs dirname | \
             sort -u --ignore-case)  }

u2ps() {
    tmpfile=$(mktemp)
    cat > $tmpfile
    cedilla $tmpfile | lpr
    rm $tmpfile
}

###########################################################################
# python

# Shortcut for activating my virtual environments.
alias activate=". $HOME/.dotfiles/bash/activate.sh"
alias gc-activate=". $HOME/bin/gc-activate.sh"
gc-use() {
    gc-activate
    unset _gc__temp
    unset _gc__default_filename
    _gc__temp="_gc__$1";
    if [ -r $_gc__temp ]; then
	_gc__default_index=
	_gc__default_filename="$_gc__temp";
    else
	_gc__default_index="$_gc__temp";
	_gc__default_filename=${!_gc__temp};
    fi
    export _gc__default_index
    export _gc__default_filename
    unset _gc__temp;
    prompt_extra=" gc=$1"
}
# Search for accounts in default gnucash file.
gcg() { grep $* "$_gc__cache/$_gc__default_index" | sort; }

###########################################################################
# docker
nse() {
    pid=$(sudo docker inspect --format {{.State.Pid}} $1);
    echo $pid;
    sudo nsenter --target $pid --mount --uts --ipc --net --pid;
}

###########################################################################
# X / ratpoison / i3

sndq() { amixer scontrols; }
snddn() { amixer -D pulse set Master 5%-; }
sndup() { amixer -D pulse set Master 5%+; }
sndmute() { amixer -D pulse set Master toggle; }

undisp() { if [ $DISPLAY ]; then DISPLAY_WAS="$DISPLAY"; unset DISPLAY; fi; }
redisp() {
    if [ "X$DISPLAY" = X ]; then
        DISPLAY=$DISPLAY_WAS xwininfo -root >/dev/null 2>/dev/null
        if [ 0 = $? ]; then
            export DISPLAY="$DISPLAY_WAS";
        else
            echo Previous DISPLAY $DISPLAY_WAS is no longer valid.
        fi
    else
        echo DISPLAY is already set.
    fi;
}
xal-disable() { xautolock -disable; }
xal-enable() { xautolock -enable; }
xal() { xal-disable; banner '' xautolock off " "; read -p 'Press any key to re-enable' -n 1; xal-enable; echo; }

###########################################################################
# Silence glibc asserts.

alias evince="evince 2>/dev/null"

###########################################################################
# Quick directory access for favourite spots.
jbks() { cd $HOME/work/startup/jellybooks/; }
tn() { cd $HOME/work/startup/transport-nantes/; }

###########################################################################
# Jellybooks personal.

jb-a() { cd $HOME/src/jellybooks/analytics; }
jb-i() { cd $HOME/src/jellybooks/infrastructure; }
jb-p() { cd $HOME/src/jellybooks/production; }
nux() {
    n=$1;
    if [ $n -gt 0 ]; then
        while [ $n -gt 0 ]; do
            (urxvt &)
            n=$(($n - 1))
        done
    fi
    unset n;
}
jb-sprint() {
    pushd $HOME/work/startup/jellybooks/sprints/
    today_="$(date +%Y-%m-%d)"
    if [ ! -d "${today_}" ]; then
	mkdir "${today_}"
    fi
    cd "${today_}"
    unset today_
}

# This is useful for ingesting bonbon discovery content and producing URL's.
# Probably I should instead push this into bonbon itself.
jb-stream_links() {
    grep t_ | sed -e 's/^t_.*__id_//; s|^|/https://www.jellybooks.com/papaya/crowberry/|;'
}
