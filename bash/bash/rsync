#
# rsync
#

# EXCLUDE=--exclude-from=$HOME/.rsync-backup-exclude
# RSYNC="rsync -va --delete $EXCLUDE"

sync-to-here() {
    vol=$1
    if [ ! -d $vol/backup ]; then
	echo "$vol not mounted?"
    else
	time rsync -va --delete jeff@fileserver:/d2/jeff/ $vol/backup/
    fi
}

# sync-backup640() { sync-to-here /media/jeff/Backup640; }
# sync-red640() { sync-to-here /media/jeff/Red-640; }
# sync-portable-640() { sync-to-here /media/jeff/Portable640; }
# sync-Black750() { sync-to-here /media/jeff/Black750; }
# sync-Black-1500() { sync-to-here /media/jeff/Black-1500; }

# sync-jeff-1TB-1() { sync-to-here /media/jeff/jeff-1TB-1/; }
# sync-jeff-1TB-2() { sync-to-here /media/jeff/jeff-1TB-2/; }

# These exclusions are junk/cache, things that I already synchronize
# with unison (cf. $HOME/.unison/{common,*prf}) or otherwise cache
# from the fileserver, or remote filesystems.
declare -a machine_exclusions_
machine_exclusions_=( .cache .macromedia Videos brunhilde fs common data Documents Downloads templates Music work)
if [ $HOSTNAME = birdsong -o $HOSTNAME = starshine ]; then
   machine_exclusions_[${#machine_exclusions_[*]}]=Pictures
fi
machine_exclusions_pattern_=
for me in ${machine_exclusions_[*]}; do
    machine_exclusions_pattern_="$machine_exclusions_pattern_ --exclude $me/"
done
sync-machine() { 
    time rsync -va --delete $machine_exclusions_pattern_ $HOME/ jeff@fileserver:/d2/jeff/machines/$HOSTNAME/;
}

sync-fileserver() { sync-data; time rsync -a fileserver:data/ $HOME/data/hosts/fileserver/; sync-data; }
sync-data() { time unison -auto data; }
sync-fast() { time unison -auto fast; }
sync-full() { time unison -auto full; }
sync-images() {
    time unison -auto images;
    if [ -e $HOME/.unison/images-2.prf ]; then
	time unison -auto images-2;
    fi
}

fog() { ssh manx.misty.com; }

## blog.purple.com
blog-down() { time rsync -va --delete --exclude common purple@blog.purple.com:./ $HOME/public_html/purple/blog/; }

## Tools for mounting/unmounting luks volumes.
lmnt() {
    device=/dev/sd$1
    mapping=$2
    sudo cryptsetup open --type luks $device $mapping
    sudo mount /dev/mapper/$mapping /$mapping
    unset device
    unset mapping
}

lumnt() {
    mapping=$1
    sudo umount /$mapping
    sudo cryptsetup luksClose $mapping
    unset mapping
}

# To mount, provide the drive letter (e.g., "a").
# To unmount, no arguments.
# srd: backup.
mluks-backup() { lmnt $1 backup; }
uluks-backup() { lumnt backup; }

# srd: hostname.
mluks-images() { lmnt $1 home2; }
uluks-images() { lumnt home2; }

sync-images-23() {
    if [ -d /images-2/jeff -a -d /images-3/jeff ]; then
	rsync -va /images-2/jeff/ /images-3/jeff/
    else
	echo Missing volume.
    fi
}

sync-starshine() {
    if [ ! -d /backup/starshine ]; then echo "Wrong host or /backup/ not mounted?"; return; fi
    if [ ! -d /backup/starshine-images ]; then echo "Wrong host or /backup/ not mounted?"; return; fi
    if [ ! -d /home2/jeff ]; then echo "Images not mounted, aborting."; return; fi
    if [ ! -r /home/jeff/images/.mounted ]; then echo "Images not mounted, aborting."; return; fi
    echo "Syncing home..."
    time rsync -a --delete --exclude dconf --exclude .dbus --exclude .gvfs $HOME/ /backup/starshine/
    echo "Syncing images..."
    time rsync -a --delete images/ /backup/starshine-images/
}

sync-birdsong() {
    if [ ! -d /backup/birdsong ]; then echo "Wrong host or /backup/ not mounted?"; return; fi
    if [ ! -d /backup/birdsong-images ]; then echo "Wrong host or /backup/ not mounted?"; return; fi
    if [ ! -d /backup/birdsong-images-2 ]; then echo "Wrong host or /backup/ not mounted?"; return; fi
    if [ ! -d /home2/jeff ]; then echo "Images not mounted, aborting."; return; fi
    if [ ! -d /images-2/jeff ]; then echo "Images not mounted, aborting."; return; fi
    echo "Syncing home..."
    time rsync -a --delete --exclude .cache/dconf $HOME/ /backup/birdsong/
    echo "Syncing images..."
    time rsync -a --delete /home2/jeff/ /backup/birdsong-images/
    echo "Sncing images-2..."
    time rsync -a --delete /images-2/jeff/ /backup/birdsong-images-2/
}
