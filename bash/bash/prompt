#!/bin/bash

# Colors for terminal.
fg_black="$(tput setaf 0)"
fg_red="$(tput setaf 1)"
fg_green="$(tput setaf 2)"
fg_yellow="$(tput setaf 3)"
fg_blue="$(tput setaf 4)"
fg_magenta="$(tput setaf 5)"
fg_cyan="$(tput setaf 6)"
fg_white="$(tput setaf 7)"
reset="$(tput sgr0)"

# This function must be called first in PROMPT_COMMAND in order to capture $?.
exit_status_indicator() {
    # And this must be the first line:
    exit_status_indicator_="$?,"
    if [ $exit_status_indicator_ = 0, ]; then
	exit_status_indicator_=
	space_=''
	exit_color_=$fg_black
    else
	space_=' '
	exit_color_=$fg_red
    fi
}

script_indicator() {
    script_indicator_=
    if [ "X$SCRIPT_NAME" != X ]; then
	script_indicator_="[$SCRIPT_NAME] "
	space_=' '
    fi
}

display_indicator() {
    display_indicator_=
    if [ "X$DISPLAY" = X ]; then
	display_indicator_='[T]'
	space_=' '
    fi
}

screen_indicator() {
    screen_indicator_=
    if [ "X$TERM" = Xscreen ]; then
	screen_indicator_="\[$fg_green\][S-\\l]"
	space=' '
    fi
}

virtualenv_indicator() {
    virtualenv_indicator_=
    if [ "X$VIRTUAL_ENV" != X ]; then
	virtualenv_indicator_="$fg_green[virt]$fg_black"
    fi
}

# These variables affect the status of the zero line git prompt.
# This is all defined in ./git-prompt, which I store here for ease
# of reference.  The original is generally installed and sourced on
# modern linux boxes.
GIT_PS1_SHOWDIRTYSTATE=1	# Show a '*' if dirty.
GIT_PS1_SHOWSTASHSTATE=1	# Show a '$' if stashed files.
GIT_PS1_SHOWUNTRACKEDFILES=1	# Show a '%' if untracked files.
GIT_PS1_SHOWUPSTREAM=auto	# Show my status relative to origin/master.

# Redefine this function in $HOME/dotfiles/bash/site_end to display a
# line before the bash prompt. The default behavior here is to show
# git repository information and python virtualenv status.
line_zero() {
    # This line is necessary if nothing else is provided:
    line_zero_=
    # This causes git information to be shown:
    git_=$(__git_ps1)
    virt_=$virtualenv_indicator_
    zerospace=
    if [ "X$git_" != X -a "X$virt_" != X ]; then
	zerospace=' '
    fi
    line_zero_="$git_$zerospace$virt_"
}

line_zero_format() {
    zero_prefix_=
    zero_suffix=
    one_prefix_=
    zero_=
    if [ X != "X$line_zero_" ]; then
	# The echo -e makes the \u work correctly.  In other words,
	# this is a trick for translating \u notation to proper UTF-8.
	#zero_prefix_=$(echo -e "\u2554\u2550")
	zero_prefix_=$(echo -e "\u256D\u2574")
	#zero_suffix_=$(echo -e "\u2550\u2557");
	zero_suffix_=$(echo -e "\u2576\u256E")
	#one_prefix_=$(echo -e "\u255 ")
	one_prefix_=$(echo -e "\u2570 ")
	zero_="\[$exit_color_\]$zero_prefix_\[$fg_black\]$line_zero_$zero_suffix_\n"
    fi
}

setup_prompt() {
    case $TERM in
	xterm*|screen|rxvt*)
            TITLEBAR='\[\033]0;\u@\h:\w\007\]'
	    PS1="${TITLEBAR}\
$zero_\[$exit_color_\]$one_prefix_\${exit_status_indicator_}${screen_indicator_}\[$fg_green\]\${display_indicator_}\${script_indicator_}\$space_\[$fg_magenta\]\u@\h:\[$fg_red\]\W \[$fg_cyan\\]$ \[$fg_black\]"
	    PS2='\[$fg_magenta\]> \[$BLACK\]'
	    PS4='\[$fg_magenta\]+ \[$BLACK\]'
            ;;
	*)
            TITLEBAR=""
	    PS1='\u@\h:\W \$ '
            ;;
    esac
}

# Prompt command outputs nothing, only sets state.
# The prompt itself computes nothing, only displays state.
PROMPT_COMMAND="exit_status_indicator; script_indicator; display_indicator; screen_indicator; virtualenv_indicator; line_zero; line_zero_format; setup_prompt; pg i3lock | grep -v grep | grep -v xauto || true"

