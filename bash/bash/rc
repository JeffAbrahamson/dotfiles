# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

## This should be the first block of this file after the
## interactivity check.
# For local customization, at beginning of bashrc
# This file should not be included with this distribution, as
# the whole point is to let the user customize as he sees fit.
if [ -f $HOME/.dotfiles/bash/site_begin ]; then
	. $HOME/.dotfiles/bash/site_begin
fi
## This is the end of this beginning block.

# don't put duplicate lines in the history. See bash(1) for more options
# don't overwrite GNU Midnight Commander's setting of `ignorespace'.
#HISTCONTROL=$HISTCONTROL${HISTCONTROL+,}ignoredups
# But what I really want is probably
HISTCONTROL=ignoredups

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r $HOME/.dircolors && eval "$(dircolors -b $HOME/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# Source global definitions
if [ "X$BASH_PROFILE" != "XLOADED" -a -f $HOME/.bash_profile ]; then
    . $HOME/.bash_profile
fi

# Alias definitions.
# You may want to put all your additions into a separate file like
# $HOME/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f $HOME/.dotfiles/bash/aliases ]; then
    . $HOME/.dotfiles/bash/aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

###########################################################################
# Completions for tsd
_tsd()
{
    local cur prev pprev opts base
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    if [ ${#COMP_WORDS[@]} -gt 2 ]; then
	pprev="${COMP_WORDS[COMP_CWORD-2]}"
    else
	pprev=
    fi
    
    if [ Xtsd = X${prev} ]; then
	completions=$(tsd.py -L)
	COMPREPLY=( $(compgen -W "$completions" -- ${cur}) )
	return 0
    fi

    if [ Xtsd = X${pprev} ]; then
	completions=$(tsd.py -C)
	COMPREPLY=( $(compgen -W "$completions" -- ${cur}) )
	return 0
    fi
    
    #COMPREPLY=( $(compgen -W "" -- ${cur}) )
    return 0
}
complete -F _tsd tsd
# I don't want to have to type the .py, but I do want python to
# compile just once (create a .pyc).
tsd() { tsd.py $*; }

###########################################################################
# Completions for gtd
_gtd()
{
    local cur prev pprev opts base
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    if [ ${#COMP_WORDS[@]} -gt 2 ]; then
	pprev="${COMP_WORDS[COMP_CWORD-2]}"
    else
	pprev=
    fi

    if [ Xgtd = X${prev} ]; then
	completions=$(gtdq)
	COMPREPLY=( $(compgen -W "$completions" -- ${cur}) )
	return 0
    fi

    #COMPREPLY=( $(compgen -W "" -- ${cur}) )
    return 0
}
complete -F _gtd gtd

###########################################################################
# Completions for note
_note()
{
    local cur prev pprev opts base
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    if [ ${#COMP_WORDS[@]} -gt 2 ]; then
	pprev="${COMP_WORDS[COMP_CWORD-2]}"
    else
	pprev=
    fi

    if [ Xnote = X${prev} ]; then
	completions=$(cd $HOME/data/notes && /bin/ls | egrep -v '~$')
	COMPREPLY=( $(compgen -W "$completions" -- ${cur}) )
	return 0
    fi

    #COMPREPLY=( $(compgen -W "" -- ${cur}) )
    return 0
}
complete -F _note note

if [ -f $HOME/.dotfiles/bash/prompt ]; then
	. $HOME/.dotfiles/bash/prompt
fi
if [ -f $HOME/.dotfiles/bash/pictools ]; then
	. $HOME/.dotfiles/bash/pictools
fi

shopt -s cdspell

## This should be the last block of this file
# For local customization, at end of bashrc
# This file should not be included with this distribution, as
# the whole point is to let the user customize as he sees fit.
if [ -f $HOME/.dotfiles/bash/site_end ]; then
	. $HOME/.dotfiles/bash/site_end
fi
## This file should end here
