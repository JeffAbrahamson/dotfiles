#!/usr/bin/env python3

"""Display recent bandwidth measurements in a tabular format.

Optionally, compute statistics on recent bandwidth numbers.

"""

from __future__ import annotations

import argparse
import sys
from pathlib import Path

ROOT = Path(__file__).resolve().parents[2]
PYTHON_DIR = ROOT / "python"
if str(PYTHON_DIR) not in sys.path:
    sys.path.insert(0, str(PYTHON_DIR))

from bandwidth_tool import DEFAULT_LIMIT  # type: ignore
from bandwidth_tool import (
    default_data_directory,
    limit_measurements,
    load_measurements,
    render_stats,
    render_table,
)


def parse_args(argv: list[str] | None = None) -> argparse.Namespace:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        "-n",
        dest="limit",
        type=int,
        default=DEFAULT_LIMIT,
        help="Number of rows to display",
    )
    parser.add_argument(
        "--stats",
        action="store_true",
        help="Display histograms instead of a table",
    )
    parser.add_argument(
        "--text",
        action="store_true",
        help="Render histograms using textual output",
    )
    parser.add_argument(
        "directory",
        nargs="?",
        type=Path,
        default=default_data_directory(),
        help="Directory containing speedtest data files",
    )
    return parser.parse_args(argv)


def main(argv: list[str] | None = None) -> int:
    args = parse_args(argv)
    try:
        measurements = load_measurements(args.directory)
    except FileNotFoundError as exc:  # pragma: no cover - defensive exit path
        print(exc, file=sys.stderr)
        return 1

    limited = limit_measurements(measurements, args.limit)
    if args.stats:
        try:
            result = render_stats(limited, text=args.text)
        except RuntimeError as exc:
            print(exc, file=sys.stderr)
            return 1
        if result is not None:
            print(result)
    else:
        print(render_table(limited))
    return 0


if __name__ == "__main__":  # pragma: no cover - CLI entry point
    raise SystemExit(main())
