#!/bin/bash

PATH=/usr/bin:/bin
renice -n 19 $$

# Below what time (to empty) when discharging should we display battery status?
threshold=$1

# First argument "daemon" means to loop.
# First argument "once" means to run once.
# Any other value is an error.
if [ "X$2" = Xdaemon ]; then
    loop=1
elif [ "X$2" = Xonce ]; then
    loop=0
else
    echo "Usage: sway-power-monitor threshold (daemon|once) [verbose]"
    exit 1
fi
if [ "X$3" = "Xverbose" ]; then
    logging=1
else
    logging=
fi

logfile=$HOME/.sway/sway-power-monitor.log
log_message() {
    if [ "X$logging" = X1 ]; then
	echo "$(date)   $*" >> $logfile;
    fi
}
log_cat() {
    if [ "X$logging" = X1 ]; then
	log_message "Long message:"
	sed -e 's/^/  /;' >> $logfile;
    fi
}

check_status()
{
    batteries=$(upower -e | grep battery)
    if [ "X$batteries" = X ]; then
	# If no batteries now, don't expect any batteries later.
	log_message "No battery, I have no role here."
	exit 0
    fi
    # Normally I have only one battery, but watch out for multiple
    # entries some day.
    for battery in $batteries; do
	delay_message=""
	upower -i $battery | log_cat
	state=$(upower -i $battery | grep state | awk -F: '{print $2}' | tr -d ' \t')
	log_message $state
	if [ "X$state" = Xdischarging ]; then
	    delay_minutes=$(upower -i $battery | grep "time to empty" | grep minutes | awk -F: '{print $2}' | \
		sed -e 's/^\s\+//; s/ minutes//; s/[\.,][0-9]\+//;')
	    if [ "X$delay_minutes" = X ]; then
		delay_hours=$(upower -i $battery | grep "time to empty" | grep hours | awk -F: '{print $2}' | \
				     sed -e 's/^\s\+//; s/ hours//; s/[\.,][0-9]\+//;')
		if [ "X$delay_hours" = X ]; then
		    delay_days=$(upower -i $battery | grep "time to empty" | grep days | awk -F: '{print $2}' | \
					sed -e 's/^\s\+//; s/ days//; s/[\.,][0-9]\+//;')
		    if [ "X$delay_days" = X ]; then
			delay_minutes=0
			delay_message="(State uncertain.)"
		    else
			delay_minutes=$(($delay_days * 60 * 24))
		    fi
		else
		    delay_minutes=$(($delay_hours * 60))
		fi
	    fi
	    percent=$(upower -i $battery | grep percent | awk -F: '{print $2}' | tr -d ' \t%')
	    log_message "$delay_minutes minutes  =  $percent %"
	    if [ $delay_minutes -lt $threshold ]; then
		if [  $delay_minutes -lt $(($threshold / 2)) ]; then
		    # If it's getting more critical, be more verbose.
		    notify-send -u critical -t 3000 -- "$(echo; echo; echo "Battery low: $delay_minutes minutes remaining."; echo "$delay_message"; echo ' '; echo ' ')"
		else
		    notify-send -u critical -t 3000 -- "$(echo "Battery low: $delay_minutes minutes remaining."; echo "$delay_message")"
		fi
	    fi
	fi
    done
}

## Periodically watch power status.
main()
{
    if [ $loop = 1 ]; then
        ## When sway exits, this script should quit as well.  But sway's
        ## exec seems to do a nice job of leaving us as a daemon.  So
        ## watch for sway exit and quit when no longer needed.
	sway_pid=$(pidof sway)
	while true; do
	    check_status
	    $HOME/bin/sway-power-status > $HOME/.power-status # For swaystatus bar.
	    sleep 60
	    if [ ! -e /proc/$sway_pid ]; then
		return
	    fi
	done
    else
	check_status
    fi
}

main
